<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Game;
use AppBundle\Entity\Player;
use AppBundle\Entity\Result;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
    public function getAllGames(): ArrayCollection
    {
        $allGames = $this->findBy([], ['date' => 'DESC']);
        return new ArrayCollection($allGames);
    }


    public function getLeagueTable(): array
    {
        return $this->getTableQueryBuilder()
            ->addSelect('SUM(results.leaguePoints) AS leaguePoints')
            ->andWhere('game.isLeague = 1')
            ->andWhere('player.leaguePlayer = 1')
            ->getQuery()
            ->getResult();
    }

    public function getLeagueTableTopResults()
    {
        $this->getTableQueryBuilder()
            ->orderBy('results.leaguePoints', 'DESC');
    }

    protected function getTableQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('game')
            ->select('player.name, player.id AS playerId')
            ->addSelect('SUM(results.winnings) AS winnings')
            ->addSelect('SUM(results.noOfRebuys) AS noOfRebuys')
            ->addSelect('SUM((results.noOfRebuys + 1)*game.buyIn + results.addOn) AS boughtIn')
            ->addSelect('SUM(results.winnings) - SUM((results.noOfRebuys + 1)*game.buyIn + results.addOn) AS net')
            ->innerJoin('game.results', 'results')
            ->leftJoin('results.player', 'player')
            ->groupBy('player.id');
    }

    public function getAllStatsTable()
    {
        return $this->getTableQueryBuilder()
            ->getQuery()
            ->getResult();
    }

    public function getAllHostGames(Player $host)
    {
        return $this->createQueryBuilder('game')
            ->andWhere('game.host = :host')
            ->setParameter('host', $host)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Player $player
     * @return ArrayCollection
     */
    public function getAllPlayersGames(Player $player): ArrayCollection
    {
        $allGames = $this->findBy([], ['date' => 'DESC']);
        $allGames = new ArrayCollection($allGames);
        $playersGames = new ArrayCollection();
        /** @var Game $game */
        foreach ($allGames as $game) {
            /** @var Result $result */
            foreach ($game->getResults() as $result) {
                if ($result->getPlayer() === $player) {
                    $playersGames->add($game);
                }
            }
        }
        return $playersGames;
    }
}
