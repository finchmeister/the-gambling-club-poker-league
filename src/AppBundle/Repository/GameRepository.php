<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Game;
use AppBundle\Entity\League;
use AppBundle\Entity\Player;
use AppBundle\Entity\Result;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
    private const ORDER_BY = ['date' => 'DESC', 'startTime' => 'DESC'];

    public function getAllGames(): ArrayCollection
    {
        $allGames = $this->findBy([], self::ORDER_BY);
        return new ArrayCollection($allGames);
    }

    public function getAllOnlineGames(): ArrayCollection
    {
        $allGames = $this->findBy(['isOnline' => true], self::ORDER_BY);
        return new ArrayCollection($allGames);
    }

    public function getLeagueGames(League $league): ArrayCollection
    {
        $qb = $this->createQueryBuilder('g');
        $qb
            ->where('g.date > :startDate')
            ->setParameter('startDate', $league->getStartDate()->sub(new \DateInterval('P1D')))
            ->andWhere($qb->expr()->eq('g.isLeague', true))
        ;
        if ($league->getEndDate() !== null) {
            $qb->andWhere('g.date <= :endDate')
                ->setParameter('endDate', $league->getEndDate());
        }
        $qb->addOrderBy('g.date', 'DESC');
        $qb->addOrderBy('g.startTime', 'DESC');
        $leagueGames = $qb->getQuery()->getResult();

        return new ArrayCollection($leagueGames);
    }

    public function getAllHostGames(Player $host): array
    {
        return $this->createQueryBuilder('game')
            ->andWhere('game.host = :host')
            ->setParameter('host', $host)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param Player $player
     * @return ArrayCollection
     */
    public function getAllPlayersGames(Player $player): ArrayCollection
    {
        $allGames = $this->findBy([], self::ORDER_BY);
        $allGames = new ArrayCollection($allGames);
        $playersGames = new ArrayCollection();
        /** @var Game $game */
        foreach ($allGames as $game) {
            /** @var Result $result */
            foreach ($game->getResults() as $result) {
                if ($result->getPlayer() === $player) {
                    $playersGames->add($game);
                }
            }
        }
        return $playersGames;
    }
}
